/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFLT 0
#define LOWER 1
#define RAISE 2
#define ADJST 3

// mouse move settings

#define MMV_U MOVE_VERT(-650)
#define MMV_D MOVE_VERT(650)
#define MMV_L MOVE_HOR(-650)
#define MMV_R MOVE_HOR(650)

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
};

// mouse wheel settings

#define MWH_U SCROLL_VERT(15)
#define MWH_D SCROLL_VERT(-15)
#define MWH_L SCROLL_HOR(-15)
#define MWH_R SCROLL_HOR(15)

&mwh {
    time-to-max-speed-ms = <2000>;
    acceleration-exponent = <0>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        mh: mod_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "mod_hold_preferred";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        lh: layer_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_hold_preferred";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LGUI Q   &kp W  &kp E  &kp R          &kp T          &kp Y      &kp U       &kp I      &kp O    &mt RGUI P
&mt LSHFT A  &kp S  &kp D  &kp F          &kp G          &kp H      &kp J       &kp K      &kp L    &mt RSHFT APOS
&mt LCTRL Z  &kp X  &kp C  &kp V          &kp B          &kp N      &kp M       &kp COMMA  &kp DOT  &mt RALT SLASH
                           &lh LOWER TAB  &lh 2 ENTER    &kp SPACE  &lh 1 BSPC
            >;
        };

        lower_layer {
            bindings = <
&none      &kp LBKT  &kp LBRC  &kp RBRC   &none        &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL   &kp AT    &kp HASH  &kp DLLR   &kp PRCNT    &kp AMPS   &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &none        &kp ASTRK  &kp UNDER  &kp PLUS   &kp PIPE  &trans
                               &mo 3      &kp ESC      &trans     &mo ADJST
            >;
        };

        raise_layer {
            bindings = <
&kp INS   &kp HOME    &kp UP        &kp END       &kp PG_UP           &kp MINUS  &kp N7   &kp N8  &kp N9  &kp COLON
&kp DEL   &kp LEFT    &kp DOWN      &kp RIGHT     &kp PG_DN           &kp PLUS   &kp N4   &kp N5  &kp N6  &kp SEMI
&kp CAPS  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY_PAUSE    &kp ASTRK  &kp N1   &kp N2  &kp N3  &trans
                                    &trans        &trans              &kp N0     &kp DOT
            >;
        };

        adjust_layer {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4      &kp F5          &none       &mwh MWH_U  &mwh MWH_D  &none       &kp PSCRN
&kp F6        &kp F7        &kp F8        &kp F9      &kp F10         &mmv MMV_L  &mmv MMV_D  &mmv MMV_U  &mmv MMV_R  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp F11     &kp F12         &none       &mkp LCLK   &mkp RCLK   &mkp MCLK   &trans
                                          &bt BT_CLR  &out OUT_TOG    &mkp LCLK   &mkp RCLK
            >;
        };
    };
};
