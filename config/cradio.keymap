/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFLT 0
#define LOWER 1
#define RAISE 2
#define ADJST 3

// mouse move settings
#define MMV_U MOVE_VERT(-650)
#define MMV_D MOVE_VERT(650)
#define MMV_L MOVE_HOR(-650)
#define MMV_R MOVE_HOR(650)

&mmv {
  time-to-max-speed-ms = <500>;
  acceleration-exponent=<1>;
};

// mouse wheel settings
#define MWH_U SCROLL_VERT(15)
#define MWH_D SCROLL_VERT(-15)
#define MWH_L SCROLL_HOR(-15)
#define MWH_R SCROLL_HOR(15)

&mwh {
  time-to-max-speed-ms = <2000>;
  acceleration-exponent=<0>;
};

&mt {
  flavor = "tap-preferred";
  tapping-term-ms = <200>;
  quick-tap-ms = <200>;
};

&lt {
  flavor = "tap-preferred";
  tapping-term-ms = <200>;
  quick-tap-ms = <200>;
};

/ {

  behaviors {
    mp: mod_preferred {
      compatible = "zmk,behavior-hold-tap";
      label = "mod_preferred";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };

    lp: layer_preferred {
      compatible = "zmk,behavior-hold-tap";
      label = "layer_preferred";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      #binding-cells = <2>;
      bindings = <&mo>, <&kp>;
    };

    ctrl_p: mod_morph_ctrl_p {
      compatible = "zmk,behavior-mod-morph";
      label = "mod_morph_ctrl_p";
      #binding-cells = <0>;
      bindings = <&mt RCTRL P>, <&kp P>;
      mods = <(MOD_LCTL|MOD_RCTL)>;
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
                 &mt LCTRL Q    &kp W    &kp E    &kp R    &kp T    &kp Y    &kp U    &kp I      &kp O    &ctrl_p
                 &mt LSHFT A    &kp S    &kp D    &kp F    &kp G    &kp H    &kp J    &kp K      &kp L    &mt RSHFT SEMI
                 &mt LALT Z     &kp X    &kp C    &kp V    &kp B    &kp N    &kp M    &kp COMMA  &kp DOT  &mt RALT SLASH
                 &lp LOWER TAB  &lp RAISE RET                       &kp SPACE  &mp LCMD BSPC
                 >;
    };

    lower_layer {
      bindings = <
                 &none     &kp LBKT  &kp LBRC  &kp RBRC  &none      &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
                 &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &kp AMPS   &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
                 &none     &none     &none     &none     &none      &kp ASTRK  &kp UNDER  &kp PLUS   &kp PIPE   &trans
                 &trans    &mo ADJST                                &kp BSPC   &lp ADJST DEL
                 >;
    };

    raise_layer {
      bindings = <
                 &kp ESC   &kp PG_UP &kp UP    &kp PG_DN &kp HOME   &kp PLUS   &kp N1   &kp N2   &kp N3   &kp DQT
                 &kp CAPS  &kp LEFT  &kp DOWN  &kp RIGHT &kp END    &kp EQUAL  &kp N4   &kp N5   &kp N6   &kp APOS
                 &none &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none   &kp MINUS  &kp N7   &kp N8   &kp N9   &trans
                 &mo ADJST &trans                                   &kp N0     &lp ADJST DOT
                 >;
    };

    adjust_layer {
      bindings = <
                 &bt BT_CLR    &mwh MWH_U  &mmv MMV_U  &mwh MWH_D  &bt BT_PRV    &kp F10  &kp F1   &kp F2   &kp F3   &kp PSCRN
                 &out OUT_TOG  &mmv MMV_L  &mmv MMV_D  &mmv MMV_R  &bt BT_NXT    &kp F11  &kp F4   &kp F5   &kp F6   &trans
                 &none         &mkp MCLK   &mkp MB4    &mkp MB5    &none         &kp F12  &kp F7   &kp F8   &kp F9   &trans
                 &mkp LCLK     &mkp RCLK                                         &kp INS  &kp DEL
                 >;
    };

  };
};
